# -*- coding: utf-8 -*-
"""HLD_AS tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_6v0HYyraqTCCjhM8PvdtFypVCdBoD1f
"""

import os
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO

# Streamlit Interface for HLD Table Analysis
st.title("HLD Table Analysis and Visualization Tool")

# File Upload
uploaded_file = st.file_uploader("Upload your HLD table file (CSV or XLSX)", type=["csv", "xlsx"])

if uploaded_file is not None:
    try:
        # Load the data
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".xlsx"):
            df = pd.read_excel(uploaded_file)
        else:
            st.error("Unsupported file type. Please upload a CSV or XLSX file.")

        st.success("File uploaded and data loaded successfully!")

        # Data Summarization
        st.header("Data Summarization")

        st.subheader("Descriptive Statistics")
        st.write(df.describe(include='all'))

        st.subheader("General Info")
        buffer = StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)

        st.subheader("Missing Data Analysis")
        missing_data = df.isnull().sum()
        st.write(missing_data[missing_data > 0])

        st.subheader("Cross-Tabulation")
        if 'Age' in df.columns and 'Gender' in df.columns:
            cross_tab = pd.crosstab(df['Age'], df['Gender'], normalize='index')
            st.write("Age-Gender Distribution", cross_tab)

        # Data Querying
        st.header("Data Querying")

        st.subheader("Dynamic Pivot Table")
        columns = st.multiselect("Select columns for pivot table", options=df.columns)
        if columns:
            pivot_values = st.selectbox("Select values for pivot table", options=df.columns)
            if pivot_values:
                pivot_table = pd.pivot_table(df, values=pivot_values, index=columns, aggfunc='mean')
                st.write("Pivot Table", pivot_table)

        st.subheader("Advanced Query Builder")
        query = st.text_input("Enter a query expression (e.g., `Age > 50 & Gender == 'Male'`)")
        if query:
            try:
                queried_df = df.query(query)
                st.write("Queried Data", queried_df)
            except Exception as e:
                st.error(f"Invalid query: {e}")

        # Data Visualization
        st.header("Data Visualization")

        st.subheader("Interactive Heatmap")
        numeric_columns = df.select_dtypes(include=['number']).columns
        if len(numeric_columns) > 1:
            x_axis = st.selectbox("Select X-axis", options=numeric_columns)
            y_axis = st.selectbox("Select Y-axis", options=numeric_columns)

            if x_axis and y_axis:
                heatmap_data = df[[x_axis, y_axis]].dropna()
                fig, ax = plt.subplots()
                sns.heatmap(heatmap_data.corr(), annot=True, cmap="coolwarm", ax=ax)
                st.pyplot(fig)

        st.subheader("Mortality and Survival Analysis")
        if 'Age' in df.columns and 'SurvivalRate' in df.columns:
            age_bins = st.slider("Define age bins (e.g., 0-100)", 0, 100, (0, 100))
            age_filtered = df[(df['Age'] >= age_bins[0]) & (df['Age'] <= age_bins[1])]
            st.write("Age-Filtered Data", age_filtered)

            fig, ax = plt.subplots()
            sns.lineplot(data=age_filtered, x='Age', y='SurvivalRate', ax=ax, marker="o")
            ax.set_title("Survival Rate by Age")
            ax.set_xlabel("Age")
            ax.set_ylabel("Survival Rate")
            st.pyplot(fig)

        st.subheader("Gender-Based Analysis")
        if 'Gender' in df.columns:
            gender_counts = df['Gender'].value_counts()
            fig, ax = plt.subplots()
            gender_counts.plot(kind='bar', color=['#1f77b4', '#ff7f0e'], ax=ax)
            ax.set_title("Gender Distribution")
            ax.set_xlabel("Gender")
            ax.set_ylabel("Count")
            st.pyplot(fig)

        st.subheader("Customizable Dashboards")
        chart_type = st.selectbox("Select Chart Type", options=["Bar", "Line", "Area"])
        chart_column = st.selectbox("Select Column for Chart", options=numeric_columns)

        if chart_column and chart_type:
            fig, ax = plt.subplots()

            if chart_type == "Bar":
                df[chart_column].value_counts().plot(kind='bar', ax=ax, color="#4CAF50")
            elif chart_type == "Line":
                df[chart_column].plot(kind='line', ax=ax, color="#4CAF50")
            elif chart_type == "Area":
                df[chart_column].plot(kind='area', ax=ax, color="#4CAF50")

            ax.set_title(f"{chart_type} Chart of {chart_column}")
            ax.set_xlabel(chart_column)
            ax.set_ylabel("Value")
            st.pyplot(fig)

    except Exception as e:
        st.error(f"An error occurred while processing the file: {e}")
else:
    st.info("Please upload a file to proceed.")

