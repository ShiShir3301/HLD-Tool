# -*- coding: utf-8 -*-
"""HLD_AS tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_6v0HYyraqTCCjhM8PvdtFypVCdBoD1f
"""

import os
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt

# Streamlit Interface for Data Analysis
st.title("Data Analysis and Visualization Tool")

# File Upload
uploaded_file = st.file_uploader("Upload your data file (CSV or XLSX)", type=["csv", "xlsx"])

if uploaded_file is not None:
    # Load the data
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    elif uploaded_file.name.endswith(".xlsx"):
        df = pd.read_excel(uploaded_file)

    st.success("File uploaded and data loaded successfully!")

    # Data Summarization
    st.header("Data Summarization")

    st.subheader("Descriptive Statistics")
    st.write(df.describe())

    st.subheader("General Info")
    buffer = []
    df.info(buf=buffer)
    s = "\n".join([line.strip() for line in buffer])
    st.text(s)

    # Data Querying
    st.header("Data Querying")

    st.subheader("Column-based Filters")
    column = st.selectbox("Select column to filter", options=df.columns)
    unique_values = df[column].unique()
    selected_values = st.multiselect("Select values to filter", options=unique_values)

    filtered_df = df[df[column].isin(selected_values)] if selected_values else df
    st.write("Filtered Data", filtered_df)

    st.subheader("Row-based Filters")
    row_start = st.number_input("Start Row", min_value=0, max_value=len(df), step=1)
    row_end = st.number_input("End Row", min_value=0, max_value=len(df), step=1, value=len(df))

    if row_start < row_end:
        filtered_df = filtered_df.iloc[row_start:row_end]
        st.write("Filtered Data by Rows", filtered_df)
    else:
        st.warning("Ensure that start row is less than end row.")

    # Data Visualization
    st.header("Data Visualization")

    st.subheader("Plot Distribution")
    dist_column = st.selectbox("Select column for distribution plot", options=df.columns)
    bins = st.slider("Number of bins", min_value=5, max_value=50, value=20, step=1)
    color = st.color_picker("Pick a color", value="#4CAF50")

    if dist_column:
        fig, ax = plt.subplots()
        filtered_df[dist_column].plot(kind='hist', bins=bins, color=color, ax=ax, alpha=0.7)
        ax.set_title(f"Distribution of {dist_column}")
        ax.set_xlabel(dist_column)
        ax.set_ylabel("Frequency")
        st.pyplot(fig)

    st.subheader("Plot Trend")
    time_column = st.selectbox("Select time column", options=df.columns)
    value_column = st.selectbox("Select value column", options=df.columns)

    if time_column and value_column:
        df[time_column] = pd.to_datetime(df[time_column], errors='coerce')
        df = df.dropna(subset=[time_column, value_column])
        df.sort_values(time_column, inplace=True)

        fig, ax = plt.subplots()
        ax.plot(df[time_column], df[value_column], marker='o', linestyle='-', color=color)
        ax.set_title(f"Trend of {value_column} over {time_column}")
        ax.set_xlabel(time_column)
        ax.set_ylabel(value_column)
        st.pyplot(fig)

else:
    st.info("Please upload a file to proceed.")